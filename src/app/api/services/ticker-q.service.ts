/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCronTickerAddPost } from '../fn/ticker-q/api-cron-ticker-add-post';
import { ApiCronTickerAddPost$Params } from '../fn/ticker-q/api-cron-ticker-add-post';
import { apiCronTickerDeleteDelete } from '../fn/ticker-q/api-cron-ticker-delete-delete';
import { ApiCronTickerDeleteDelete$Params } from '../fn/ticker-q/api-cron-ticker-delete-delete';
import { apiCronTickerOccurrenceDeleteDelete } from '../fn/ticker-q/api-cron-ticker-occurrence-delete-delete';
import { ApiCronTickerOccurrenceDeleteDelete$Params } from '../fn/ticker-q/api-cron-ticker-occurrence-delete-delete';
import { apiCronTickerOccurrencesCronTickerIdGet } from '../fn/ticker-q/api-cron-ticker-occurrences-cron-ticker-id-get';
import { ApiCronTickerOccurrencesCronTickerIdGet$Params } from '../fn/ticker-q/api-cron-ticker-occurrences-cron-ticker-id-get';
import { apiCronTickerOccurrencesCronTickerIdGraphDataGet } from '../fn/ticker-q/api-cron-ticker-occurrences-cron-ticker-id-graph-data-get';
import { ApiCronTickerOccurrencesCronTickerIdGraphDataGet$Params } from '../fn/ticker-q/api-cron-ticker-occurrences-cron-ticker-id-graph-data-get';
import { apiCronTickerRunPost } from '../fn/ticker-q/api-cron-ticker-run-post';
import { ApiCronTickerRunPost$Params } from '../fn/ticker-q/api-cron-ticker-run-post';
import { apiCronTickersGet } from '../fn/ticker-q/api-cron-tickers-get';
import { ApiCronTickersGet$Params } from '../fn/ticker-q/api-cron-tickers-get';
import { apiCronTickersGraphDataGet } from '../fn/ticker-q/api-cron-tickers-graph-data-get';
import { ApiCronTickersGraphDataGet$Params } from '../fn/ticker-q/api-cron-tickers-graph-data-get';
import { apiCronTickersGraphDataRangeGet } from '../fn/ticker-q/api-cron-tickers-graph-data-range-get';
import { ApiCronTickersGraphDataRangeGet$Params } from '../fn/ticker-q/api-cron-tickers-graph-data-range-get';
import { apiCronTickersGraphDataRangeIdGet } from '../fn/ticker-q/api-cron-tickers-graph-data-range-id-get';
import { ApiCronTickersGraphDataRangeIdGet$Params } from '../fn/ticker-q/api-cron-tickers-graph-data-range-id-get';
import { apiCronTickerUpdatePut } from '../fn/ticker-q/api-cron-ticker-update-put';
import { ApiCronTickerUpdatePut$Params } from '../fn/ticker-q/api-cron-ticker-update-put';
import { apiOptionsGet } from '../fn/ticker-q/api-options-get';
import { ApiOptionsGet$Params } from '../fn/ticker-q/api-options-get';
import { apiTickerCancelPost } from '../fn/ticker-q/api-ticker-cancel-post';
import { ApiTickerCancelPost$Params } from '../fn/ticker-q/api-ticker-cancel-post';
import { apiTickerFunctionsGet } from '../fn/ticker-q/api-ticker-functions-get';
import { ApiTickerFunctionsGet$Params } from '../fn/ticker-q/api-ticker-functions-get';
import { apiTickerHostNextTickerGet } from '../fn/ticker-q/api-ticker-host-next-ticker-get';
import { ApiTickerHostNextTickerGet$Params } from '../fn/ticker-q/api-ticker-host-next-ticker-get';
import { apiTickerHostRestartPost } from '../fn/ticker-q/api-ticker-host-restart-post';
import { ApiTickerHostRestartPost$Params } from '../fn/ticker-q/api-ticker-host-restart-post';
import { apiTickerHostStartPost } from '../fn/ticker-q/api-ticker-host-start-post';
import { ApiTickerHostStartPost$Params } from '../fn/ticker-q/api-ticker-host-start-post';
import { apiTickerHostStatusGet } from '../fn/ticker-q/api-ticker-host-status-get';
import { ApiTickerHostStatusGet$Params } from '../fn/ticker-q/api-ticker-host-status-get';
import { apiTickerHostStopPost } from '../fn/ticker-q/api-ticker-host-stop-post';
import { ApiTickerHostStopPost$Params } from '../fn/ticker-q/api-ticker-host-stop-post';
import { apiTickerMachineJobsGet } from '../fn/ticker-q/api-ticker-machine-jobs-get';
import { ApiTickerMachineJobsGet$Params } from '../fn/ticker-q/api-ticker-machine-jobs-get';
import { apiTickerRequestIdGet } from '../fn/ticker-q/api-ticker-request-id-get';
import { ApiTickerRequestIdGet$Params } from '../fn/ticker-q/api-ticker-request-id-get';
import { apiTickerStatusesGetGet } from '../fn/ticker-q/api-ticker-statuses-get-get';
import { ApiTickerStatusesGetGet$Params } from '../fn/ticker-q/api-ticker-statuses-get-get';
import { apiTickerStatusesGetLastWeekGet } from '../fn/ticker-q/api-ticker-statuses-get-last-week-get';
import { ApiTickerStatusesGetLastWeekGet$Params } from '../fn/ticker-q/api-ticker-statuses-get-last-week-get';
import { apiTimeTickerAddPost } from '../fn/ticker-q/api-time-ticker-add-post';
import { ApiTimeTickerAddPost$Params } from '../fn/ticker-q/api-time-ticker-add-post';
import { apiTimeTickerDeleteDelete } from '../fn/ticker-q/api-time-ticker-delete-delete';
import { ApiTimeTickerDeleteDelete$Params } from '../fn/ticker-q/api-time-ticker-delete-delete';
import { apiTimeTickersGet } from '../fn/ticker-q/api-time-tickers-get';
import { ApiTimeTickersGet$Params } from '../fn/ticker-q/api-time-tickers-get';
import { apiTimeTickersGraphDataGet } from '../fn/ticker-q/api-time-tickers-graph-data-get';
import { ApiTimeTickersGraphDataGet$Params } from '../fn/ticker-q/api-time-tickers-graph-data-get';
import { apiTimeTickersGraphDataRangeGet } from '../fn/ticker-q/api-time-tickers-graph-data-range-get';
import { ApiTimeTickersGraphDataRangeGet$Params } from '../fn/ticker-q/api-time-tickers-graph-data-range-get';
import { apiTimeTickersSetBatchParentPost } from '../fn/ticker-q/api-time-tickers-set-batch-parent-post';
import { ApiTimeTickersSetBatchParentPost$Params } from '../fn/ticker-q/api-time-tickers-set-batch-parent-post';
import { apiTimeTickerUpdatePut } from '../fn/ticker-q/api-time-ticker-update-put';
import { ApiTimeTickerUpdatePut$Params } from '../fn/ticker-q/api-time-ticker-update-put';

@Injectable({ providedIn: 'root' })
export class TickerQService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiOptionsGet()` */
  static readonly ApiOptionsGetPath = '/api/options';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOptionsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOptionsGet$Response(params?: ApiOptionsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiOptionsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOptionsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOptionsGet(params?: ApiOptionsGet$Params, context?: HttpContext): Observable<void> {
    return this.apiOptionsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickersGet()` */
  static readonly ApiCronTickersGetPath = '/api/cron-tickers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickersGet$Response(params?: ApiCronTickersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickersGet(params?: ApiCronTickersGet$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTimeTickersGet()` */
  static readonly ApiTimeTickersGetPath = '/api/time-tickers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimeTickersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimeTickersGet$Response(params?: ApiTimeTickersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTimeTickersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimeTickersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimeTickersGet(params?: ApiTimeTickersGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTimeTickersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTimeTickersGraphDataRangeGet()` */
  static readonly ApiTimeTickersGraphDataRangeGetPath = '/api/time-tickers/:graph-data-range';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimeTickersGraphDataRangeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimeTickersGraphDataRangeGet$Response(params?: ApiTimeTickersGraphDataRangeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTimeTickersGraphDataRangeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimeTickersGraphDataRangeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimeTickersGraphDataRangeGet(params?: ApiTimeTickersGraphDataRangeGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTimeTickersGraphDataRangeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTimeTickersGraphDataGet()` */
  static readonly ApiTimeTickersGraphDataGetPath = '/api/time-tickers/:graph-data';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimeTickersGraphDataGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimeTickersGraphDataGet$Response(params?: ApiTimeTickersGraphDataGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTimeTickersGraphDataGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimeTickersGraphDataGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimeTickersGraphDataGet(params?: ApiTimeTickersGraphDataGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTimeTickersGraphDataGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTimeTickersSetBatchParentPost()` */
  static readonly ApiTimeTickersSetBatchParentPostPath = '/api/time-tickers/set-batch-parent';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimeTickersSetBatchParentPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiTimeTickersSetBatchParentPost$Response(params?: ApiTimeTickersSetBatchParentPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTimeTickersSetBatchParentPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimeTickersSetBatchParentPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiTimeTickersSetBatchParentPost(params?: ApiTimeTickersSetBatchParentPost$Params, context?: HttpContext): Observable<void> {
    return this.apiTimeTickersSetBatchParentPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickersGraphDataRangeGet()` */
  static readonly ApiCronTickersGraphDataRangeGetPath = '/api/cron-tickers/:graph-data-range';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickersGraphDataRangeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickersGraphDataRangeGet$Response(params?: ApiCronTickersGraphDataRangeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickersGraphDataRangeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickersGraphDataRangeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickersGraphDataRangeGet(params?: ApiCronTickersGraphDataRangeGet$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickersGraphDataRangeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickersGraphDataRangeIdGet()` */
  static readonly ApiCronTickersGraphDataRangeIdGetPath = '/api/cron-tickers/:graph-data-range-id';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickersGraphDataRangeIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickersGraphDataRangeIdGet$Response(params?: ApiCronTickersGraphDataRangeIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickersGraphDataRangeIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickersGraphDataRangeIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickersGraphDataRangeIdGet(params?: ApiCronTickersGraphDataRangeIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickersGraphDataRangeIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickersGraphDataGet()` */
  static readonly ApiCronTickersGraphDataGetPath = '/api/cron-tickers/:graph-data';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickersGraphDataGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickersGraphDataGet$Response(params?: ApiCronTickersGraphDataGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickersGraphDataGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickersGraphDataGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickersGraphDataGet(params?: ApiCronTickersGraphDataGet$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickersGraphDataGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickerOccurrencesCronTickerIdGet()` */
  static readonly ApiCronTickerOccurrencesCronTickerIdGetPath = '/api/cron-ticker-occurrences/:cronTickerId';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickerOccurrencesCronTickerIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerOccurrencesCronTickerIdGet$Response(params?: ApiCronTickerOccurrencesCronTickerIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickerOccurrencesCronTickerIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickerOccurrencesCronTickerIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerOccurrencesCronTickerIdGet(params?: ApiCronTickerOccurrencesCronTickerIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickerOccurrencesCronTickerIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickerOccurrencesCronTickerIdGraphDataGet()` */
  static readonly ApiCronTickerOccurrencesCronTickerIdGraphDataGetPath = '/api/cron-ticker-occurrences/:cronTickerId/:graph-data';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickerOccurrencesCronTickerIdGraphDataGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerOccurrencesCronTickerIdGraphDataGet$Response(params?: ApiCronTickerOccurrencesCronTickerIdGraphDataGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickerOccurrencesCronTickerIdGraphDataGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickerOccurrencesCronTickerIdGraphDataGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerOccurrencesCronTickerIdGraphDataGet(params?: ApiCronTickerOccurrencesCronTickerIdGraphDataGet$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickerOccurrencesCronTickerIdGraphDataGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerCancelPost()` */
  static readonly ApiTickerCancelPostPath = '/api/ticker/:cancel';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerCancelPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerCancelPost$Response(params?: ApiTickerCancelPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerCancelPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerCancelPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerCancelPost(params?: ApiTickerCancelPost$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerCancelPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTimeTickerDeleteDelete()` */
  static readonly ApiTimeTickerDeleteDeletePath = '/api/time-ticker/:delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimeTickerDeleteDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimeTickerDeleteDelete$Response(params?: ApiTimeTickerDeleteDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTimeTickerDeleteDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimeTickerDeleteDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimeTickerDeleteDelete(params?: ApiTimeTickerDeleteDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiTimeTickerDeleteDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickerDeleteDelete()` */
  static readonly ApiCronTickerDeleteDeletePath = '/api/cron-ticker/:delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickerDeleteDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerDeleteDelete$Response(params?: ApiCronTickerDeleteDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickerDeleteDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickerDeleteDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerDeleteDelete(params?: ApiCronTickerDeleteDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickerDeleteDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickerOccurrenceDeleteDelete()` */
  static readonly ApiCronTickerOccurrenceDeleteDeletePath = '/api/cron-ticker-occurrence/:delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickerOccurrenceDeleteDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerOccurrenceDeleteDelete$Response(params?: ApiCronTickerOccurrenceDeleteDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickerOccurrenceDeleteDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickerOccurrenceDeleteDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerOccurrenceDeleteDelete(params?: ApiCronTickerOccurrenceDeleteDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickerOccurrenceDeleteDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerRequestIdGet()` */
  static readonly ApiTickerRequestIdGetPath = '/api/ticker-request/:id';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerRequestIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerRequestIdGet$Response(params?: ApiTickerRequestIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerRequestIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerRequestIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerRequestIdGet(params?: ApiTickerRequestIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerRequestIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerFunctionsGet()` */
  static readonly ApiTickerFunctionsGetPath = '/api/ticker-functions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerFunctionsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerFunctionsGet$Response(params?: ApiTickerFunctionsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerFunctionsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerFunctionsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerFunctionsGet(params?: ApiTickerFunctionsGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerFunctionsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTimeTickerUpdatePut()` */
  static readonly ApiTimeTickerUpdatePutPath = '/api/time-ticker/:update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimeTickerUpdatePut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiTimeTickerUpdatePut$Response(params?: ApiTimeTickerUpdatePut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTimeTickerUpdatePut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimeTickerUpdatePut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiTimeTickerUpdatePut(params?: ApiTimeTickerUpdatePut$Params, context?: HttpContext): Observable<void> {
    return this.apiTimeTickerUpdatePut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTimeTickerAddPost()` */
  static readonly ApiTimeTickerAddPostPath = '/api/time-ticker/:add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimeTickerAddPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiTimeTickerAddPost$Response(params?: ApiTimeTickerAddPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTimeTickerAddPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimeTickerAddPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiTimeTickerAddPost(params?: ApiTimeTickerAddPost$Params, context?: HttpContext): Observable<void> {
    return this.apiTimeTickerAddPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickerAddPost()` */
  static readonly ApiCronTickerAddPostPath = '/api/cron-ticker/:add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickerAddPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCronTickerAddPost$Response(params?: ApiCronTickerAddPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickerAddPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickerAddPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCronTickerAddPost(params?: ApiCronTickerAddPost$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickerAddPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickerUpdatePut()` */
  static readonly ApiCronTickerUpdatePutPath = '/api/cron-ticker/:update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickerUpdatePut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCronTickerUpdatePut$Response(params?: ApiCronTickerUpdatePut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickerUpdatePut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickerUpdatePut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCronTickerUpdatePut(params?: ApiCronTickerUpdatePut$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickerUpdatePut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCronTickerRunPost()` */
  static readonly ApiCronTickerRunPostPath = '/api/cron-ticker/:run';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCronTickerRunPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerRunPost$Response(params?: ApiCronTickerRunPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCronTickerRunPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCronTickerRunPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCronTickerRunPost(params?: ApiCronTickerRunPost$Params, context?: HttpContext): Observable<void> {
    return this.apiCronTickerRunPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerHostNextTickerGet()` */
  static readonly ApiTickerHostNextTickerGetPath = '/api/ticker-host/:next-ticker';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerHostNextTickerGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostNextTickerGet$Response(params?: ApiTickerHostNextTickerGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerHostNextTickerGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerHostNextTickerGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostNextTickerGet(params?: ApiTickerHostNextTickerGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerHostNextTickerGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerHostStopPost()` */
  static readonly ApiTickerHostStopPostPath = '/api/ticker-host/:stop';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerHostStopPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostStopPost$Response(params?: ApiTickerHostStopPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerHostStopPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerHostStopPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostStopPost(params?: ApiTickerHostStopPost$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerHostStopPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerHostStartPost()` */
  static readonly ApiTickerHostStartPostPath = '/api/ticker-host/:start';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerHostStartPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostStartPost$Response(params?: ApiTickerHostStartPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerHostStartPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerHostStartPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostStartPost(params?: ApiTickerHostStartPost$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerHostStartPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerHostRestartPost()` */
  static readonly ApiTickerHostRestartPostPath = '/api/ticker-host/:restart';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerHostRestartPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostRestartPost$Response(params?: ApiTickerHostRestartPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerHostRestartPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerHostRestartPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostRestartPost(params?: ApiTickerHostRestartPost$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerHostRestartPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerHostStatusGet()` */
  static readonly ApiTickerHostStatusGetPath = '/api/ticker-host/:status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerHostStatusGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostStatusGet$Response(params?: ApiTickerHostStatusGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerHostStatusGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerHostStatusGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerHostStatusGet(params?: ApiTickerHostStatusGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerHostStatusGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerStatusesGetLastWeekGet()` */
  static readonly ApiTickerStatusesGetLastWeekGetPath = '/api/ticker/statuses/:get-last-week';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerStatusesGetLastWeekGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerStatusesGetLastWeekGet$Response(params?: ApiTickerStatusesGetLastWeekGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerStatusesGetLastWeekGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerStatusesGetLastWeekGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerStatusesGetLastWeekGet(params?: ApiTickerStatusesGetLastWeekGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerStatusesGetLastWeekGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerStatusesGetGet()` */
  static readonly ApiTickerStatusesGetGetPath = '/api/ticker/statuses/:get';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerStatusesGetGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerStatusesGetGet$Response(params?: ApiTickerStatusesGetGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerStatusesGetGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerStatusesGetGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerStatusesGetGet(params?: ApiTickerStatusesGetGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerStatusesGetGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTickerMachineJobsGet()` */
  static readonly ApiTickerMachineJobsGetPath = '/api/ticker/machine/:jobs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTickerMachineJobsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerMachineJobsGet$Response(params?: ApiTickerMachineJobsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTickerMachineJobsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTickerMachineJobsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTickerMachineJobsGet(params?: ApiTickerMachineJobsGet$Params, context?: HttpContext): Observable<void> {
    return this.apiTickerMachineJobsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
