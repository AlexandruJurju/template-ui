/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAll } from '../fn/users/get-all';
import { GetAll$Params } from '../fn/users/get-all';
import { getByEmail } from '../fn/users/get-by-email';
import { GetByEmail$Params } from '../fn/users/get-by-email';
import { getById } from '../fn/users/get-by-id';
import { GetById$Params } from '../fn/users/get-by-id';
import { loginUser } from '../fn/users/login-user';
import { LoginUser$Params } from '../fn/users/login-user';
import { me } from '../fn/users/me';
import { Me$Params } from '../fn/users/me';
import { refreshToken } from '../fn/users/refresh-token';
import { RefreshToken$Params } from '../fn/users/refresh-token';
import { registerUser } from '../fn/users/register-user';
import { RegisterUser$Params } from '../fn/users/register-user';
import { Void as SystemVoid } from '../models/System/void';
import { LoginResponse as TemplateApplicationUsersCommandsLoginLoginResponse } from '../models/Template/Application/Users/Commands/Login/login-response';
import { UserResponse as TemplateApplicationUsersQueriesGetAllUserResponse } from '../models/Template/Application/Users/Queries/GetAll/user-response';
import { UserResponse as TemplateApplicationUsersQueriesGetByEmailUserResponse } from '../models/Template/Application/Users/Queries/GetByEmail/user-response';
import { UserResponse as TemplateApplicationUsersQueriesGetByIdUserResponse } from '../models/Template/Application/Users/Queries/GetById/user-response';
import { verifyEmail } from '../fn/users/verify-email';
import { VerifyEmail$Params } from '../fn/users/verify-email';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAll()` */
  static readonly GetAllPath = '/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll$Response(params?: GetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TemplateApplicationUsersQueriesGetAllUserResponse>>> {
    return getAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll(params?: GetAll$Params, context?: HttpContext): Observable<Array<TemplateApplicationUsersQueriesGetAllUserResponse>> {
    return this.getAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TemplateApplicationUsersQueriesGetAllUserResponse>>): Array<TemplateApplicationUsersQueriesGetAllUserResponse> => r.body)
    );
  }

  /** Path part for operation `getByEmail()` */
  static readonly GetByEmailPath = '/users/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByEmail$Response(params: GetByEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<TemplateApplicationUsersQueriesGetByEmailUserResponse>> {
    return getByEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByEmail(params: GetByEmail$Params, context?: HttpContext): Observable<TemplateApplicationUsersQueriesGetByEmailUserResponse> {
    return this.getByEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<TemplateApplicationUsersQueriesGetByEmailUserResponse>): TemplateApplicationUsersQueriesGetByEmailUserResponse => r.body)
    );
  }

  /** Path part for operation `getById()` */
  static readonly GetByIdPath = '/users/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById$Response(params: GetById$Params, context?: HttpContext): Observable<StrictHttpResponse<TemplateApplicationUsersQueriesGetByIdUserResponse>> {
    return getById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById(params: GetById$Params, context?: HttpContext): Observable<TemplateApplicationUsersQueriesGetByIdUserResponse> {
    return this.getById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TemplateApplicationUsersQueriesGetByIdUserResponse>): TemplateApplicationUsersQueriesGetByIdUserResponse => r.body)
    );
  }

  /** Path part for operation `loginUser()` */
  static readonly LoginUserPath = '/users/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  loginUser$Response(params: LoginUser$Params, context?: HttpContext): Observable<StrictHttpResponse<TemplateApplicationUsersCommandsLoginLoginResponse>> {
    return loginUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  loginUser(params: LoginUser$Params, context?: HttpContext): Observable<TemplateApplicationUsersCommandsLoginLoginResponse> {
    return this.loginUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<TemplateApplicationUsersCommandsLoginLoginResponse>): TemplateApplicationUsersCommandsLoginLoginResponse => r.body)
    );
  }

  /** Path part for operation `me()` */
  static readonly MePath = '/users/me';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `me()` instead.
   *
   * This method doesn't expect any request body.
   */
  me$Response(params?: Me$Params, context?: HttpContext): Observable<StrictHttpResponse<TemplateApplicationUsersQueriesGetByIdUserResponse>> {
    return me(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `me$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  me(params?: Me$Params, context?: HttpContext): Observable<TemplateApplicationUsersQueriesGetByIdUserResponse> {
    return this.me$Response(params, context).pipe(
      map((r: StrictHttpResponse<TemplateApplicationUsersQueriesGetByIdUserResponse>): TemplateApplicationUsersQueriesGetByIdUserResponse => r.body)
    );
  }

  /** Path part for operation `refreshToken()` */
  static readonly RefreshTokenPath = '/users/refresh-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `refreshToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  refreshToken$Response(params: RefreshToken$Params, context?: HttpContext): Observable<StrictHttpResponse<TemplateApplicationUsersCommandsLoginLoginResponse>> {
    return refreshToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `refreshToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  refreshToken(params: RefreshToken$Params, context?: HttpContext): Observable<TemplateApplicationUsersCommandsLoginLoginResponse> {
    return this.refreshToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<TemplateApplicationUsersCommandsLoginLoginResponse>): TemplateApplicationUsersCommandsLoginLoginResponse => r.body)
    );
  }

  /** Path part for operation `registerUser()` */
  static readonly RegisterUserPath = '/users/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerUser$Response(params: RegisterUser$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return registerUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerUser(params: RegisterUser$Params, context?: HttpContext): Observable<any> {
    return this.registerUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `verifyEmail()` */
  static readonly VerifyEmailPath = '/users/verify-email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `verifyEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  verifyEmail$Response(params: VerifyEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<SystemVoid>> {
    return verifyEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `verifyEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  verifyEmail(params: VerifyEmail$Params, context?: HttpContext): Observable<SystemVoid> {
    return this.verifyEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<SystemVoid>): SystemVoid => r.body)
    );
  }

}
